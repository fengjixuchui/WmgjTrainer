分析人物数据思路：
    面向对象编程：
        1.角色是一个对象...     人物类：属性和方法
        2.怪物是一个对象...
        3.地图...
        4.NPC...

        class Role
        {
        public:
            string name;            （字符类型  宽字符/窄字符  字符指针/字符对象）
            int hp;
            int mp;
            int level;
            int money;
            float posX;
            float posY;
            float posZ;
            int selectObjectId;     人物选中目标的ID
            ...
        }
        Role role;  类的成员变量内存位置是相对连续的，可以利用地址偏移快速定位相关信息。找人物属性，
        role.name;  其实就是找到this指针，然后通过偏移来获得人物各项属性
        role.hp;

逆向寻找复杂CALL思路分析：
    思路1：
        技能，应该有技能ID，索引和文字描述信息。用CE搜索相关字符信息然后下内存断点定位关键CALL
    思路2：
        分析游戏按键和鼠标点击处理机制，逆向寻找关键CALL
    思路3：
        （针对网游最实用）释放技能等动作需要和服务器进行网络通讯，跟踪send(recv)函数，然后看函数参数
        和堆栈反推上层函数，寻找关键CALL

        猜想1：游戏释放技能函数模式层层调用
        UserSkill(...)
        {
            ...                 例如特效处理和伤害计算等
            xxx(...)
            {
                xxx(...)
                {
                    send(...)   向服务器发送技能相关信息，断点打在send函数，根据堆栈函数调用向上回
                                溯寻找关键CALL
                }
            }
            ...
        }

        猜想2：游戏释放技能模式为处理消息队列模式
        SendNotify(...)     发送消息或触发事件

        while(true)         事件和消息处理线程
        {
            ...
            switch(...)
            {
                case xxx:
                ...         假设该处为释放技能代码
                break
                case xxx:
                ...         假设该处为使用药品代码
                break
            }
            ...
        }

人物选中目标（玩家、怪物、NPC等）分析：
    思路1：
        在人物对象信息偏移地址中寻找与选中目标相关的信息（目标ID和地址等信息）然后通过内存断点分析访
        问这些信息的代码来确定目标CALL
    思路2：
        网游可以通过send函数来分析选中目标操作的CALL，与之前分析方法类似

人物技能信息分析：
    猜想：技能也是类封装，每个技能都是这个类的对象
    class Skill
    {
        int skillId;
        int skillLevel;
        int skillCd;
        SkillInfo skillInfo;    技能详细信息
        ...
    }

    class SkillInfo
    {
        string skillName;
        string skillDesc;
        ...
    }

人物周围怪物分析：
    猜想：怪物信息是封装的对象
    class Monster
    {
        int id;         怪物ID
        string name;    怪物名称
        int hp;         当前生命值
        int hpMax;      最大生命值
        int level;      怪物等级
        float posX;
        float posY;
        float posZ;
        ...
    }

    思路1：
        在游戏中用CE搜索怪物相关的信息（怪物的ID、生命值、名字等）定位到怪物对象的地址，下内存访问断
        点分析相关代码，分析代码逆向找到怪物列表
    思路2：
        网游可以通过send函数来分析选中目标操作的CALL，与之前分析方法类似

        怪物信息偏移地址分析：
        Monster m1;
        Monster m2;
        ...

        m1.id;  相当于找到类首地址+偏移(this->id)定位ID
        m1.name;
        ...

        人物周围怪物列表：
        m1, m2, m3...   遍历列表需要注意循环相关代码

